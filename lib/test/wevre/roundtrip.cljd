(ns wevre.roundtrip
  (:require ["dart:convert" :as convert]
            ["dart:io" :as io]
            ["dart:typed_data" :as td]
            [wevre.transit-cljd :as transit]))

(defn json-round-trip []
  (let [codec (transit/json)]
    (-> io/stdin
        (.transform convert/utf8.decoder)
        (.transform (.-decoder codec))
        (.transform (.-encoder codec))
        (.transform convert/utf8.encoder)
        (.pipe io/stdout))))

(defn json-verbose-round-trip []
  (let [codec (transit/json-verbose)]
    (-> io/stdin
        (.transform convert/utf8.decoder)
        (.transform (.-decoder codec))
        (.transform (.-encoder codec))
        (.transform convert/utf8.encoder)
        (.pipe io/stdout))))

(defn msgpack-round-trip []
  (let [codec (transit/msgpack)]
    (-> io/stdin
        (. #/(cast td/Uint8List))
        (.transform (.-decoder codec))
        (.transform (.-encoder codec))
        (. #/(cast (List int)))
        (.pipe io/stdout))))

#_{:clojure-lsp/ignore [:clojure-lsp/unused-public-var]}
(defn main [arg]
  (case (get arg 0)
    "json" (json-round-trip)
    "json-verbose" (json-verbose-round-trip)
    "msgpack" (msgpack-round-trip)
    (println "arg is `" arg "`")))
