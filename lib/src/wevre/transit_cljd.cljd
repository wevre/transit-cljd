(ns wevre.transit-cljd
  "An implementation of the transit-format for ClojureDart build on top of the
   transit_dart Dart package."
  (:require [cljd.core :as cljd]
            ["package:transit_dart/transit_dart.dart" :as transit]
            ["package:transit_dart/src/handlers/write_handlers.dart" :as clazz]))

;; Writing
(def default-write-handlers
  (hash-map
    (#/(clazz/Class List))
    (reify :extends #/(transit/WriteHandler List dynamic)
      (tag [_ l] (if (sequential? l) "list" "array"))
      (rep [_ l .tag] (if (sequential? l) (transit/TaggedValue "array" l) l))
      (stringRep [_ _] nil))
    (#/(clazz/Class cljd/Keyword))
    (reify :extends #/(transit/WriteHandler cljd/Keyword dynamic)
      (tag [_ l] ":")
      (rep [_ kw .tag] (.substring (str kw) 1))
      (stringRep [_ kw] (.substring (str kw) 1)))
    (#/(clazz/Class cljd/Symbol))
    (reify :extends #/(transit/WriteHandler cljd/Symbol dynamic)
      (tag [_ _o] "$")
      (rep [_ o .tag] (str o))
      (stringRep [_ o] (str o)))))

;; Reading
(def default-read-handlers
  {":" (reify transit/ReadHandler (fromRep [_ o] (keyword o)))
   "$" (reify transit/ReadHandler (fromRep [_ o] (symbol o)))
   "set"
   (reify transit/ArrayReadHandler
     (fromRep [_ _o])
     (arrayBuilder [_]
       (reify :extends transit/ArrayBuilder
         (init [_] (transient #{}))
         (add [_ s i] (conj! s i))
         (complete [_ s] (persistent! s)))))
   "list"
   (reify transit/ArrayReadHandler
     (fromRep [_ o] o)
     (arrayBuilder [_]
       (reify :extends transit/ArrayBuilder
         (init [_] (transient []))
         (add [_ l item] (conj! l item))
         (complete [_ l] (persistent! l)))))
   "cmap"
   (reify transit/ArrayReadHandler
     (fromRep [_ _o])
     (arrayBuilder [_]
       (let [marker ^:unique (Object)
             next-key #dart ^:fixed [marker]]
         (reify
           :extends transit/ArrayBuilder
           (init [_] (transient {}))
           (add [_ m i]
             (let [k (aget next-key 0)]
               (if (identical? k marker)
                 (do
                   (aset next-key 0 i)
                   m)
                 (do
                   (aset next-key 0 marker)
                   (assoc! m k i)))))
           (complete [_ m] (persistent! m))))))})

;; Builders

(def map-builder
  "docstring"
  (reify
    :extends #/(transit/MapBuilder cljd/TransientHashMap cljd/PersistentHashMap dynamic dynamic)
    (init [_] (transient {}))
    (add [_ m k v] (assoc! m k v))
    (complete [_ m] (persistent! m))))

(def array-builder
  "docstring"
  (reify
    :extends #/(transit/ArrayBuilder cljd/TransientVector cljd/PersistentVector dynamic)
    (init [_] (transient []))
    (add [_ v i] (conj! v i))
    (complete [_ v] (persistent! v))))

;; Codecs

(defn ^transit/TransitJsonCodec json
  "docstring"
  [& {:keys [custom-read-handlers
             custom-write-handlers
             map-builder
             array-builder]
      :or {custom-read-handlers default-read-handlers
           custom-write-handlers default-write-handlers
           map-builder map-builder
           array-builder array-builder}}]
  (transit/TransitJsonCodec
   .customReadHandlers custom-read-handlers
   .customWriteHandlers custom-write-handlers
   .mapBuilder map-builder
   .arrayBuilder array-builder))

(defn ^transit/TransitJsonVerboseCodec json-verbose
  "docstring"
  [& {:keys [custom-read-handlers
             custom-write-handlers
             map-builder
             array-builder]
      :or {custom-read-handlers default-read-handlers
           custom-write-handlers default-write-handlers
           map-builder map-builder
           array-builder array-builder}}]
  (transit/TransitJsonVerboseCodec
   .customReadHandlers custom-read-handlers
   .customWriteHandlers custom-write-handlers
   .mapBuilder map-builder
   .arrayBuilder array-builder))

(defn ^transit/TransitMessagePackCodec msgpack
  "docstring"
  [& {:keys [custom-read-handlers
             custom-write-handlers
             map-builder
             array-builder]
      :or {custom-read-handlers default-read-handlers
           custom-write-handlers default-write-handlers
           map-builder map-builder
           array-builder array-builder}}]
  (transit/TransitMessagePackCodec
   .customReadHandlers custom-read-handlers
   .customWriteHandlers custom-write-handlers
   .mapBuilder map-builder
   .arrayBuilder array-builder))
